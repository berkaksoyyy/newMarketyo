/**
 * Marketyo Mobile Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.marketyo.platform.model

import com.google.gson.Gson
import com.google.gson.annotations.SerializedName
import java.util.*

class Category {

    @SerializedName("id")
    var id: String? = null
    @SerializedName("idParent")
    var idParent: String? = null
    @SerializedName("name")
    var name: String? = null
    @SerializedName("img")
    var imageUrl: String? = null
    @SerializedName("icon")
    var iconUrl: String? = null
    @SerializedName("description")
    var description: String? = null
    @SerializedName("isRoot")
    var isRoot: Boolean? = null
    @SerializedName("isVisible")
    var isVisible: Boolean? = null
    @Transient
    var isSelected: Boolean = false
    @Transient
    var hasChildren: Boolean = false

    var adsImage : String? = null

    constructor(name: String, imageUrl: String) {
        this.name = name
        this.imageUrl = imageUrl
    }

    constructor(id: String, name: String, imageUrl: String? = null) {
        this.name = name
        this.imageUrl = imageUrl
        this.id = id
    }

    constructor()

    fun toJson(): String {
        val gson = Gson()
        return gson.toJson(this)
    }

    companion object {

        @JvmStatic
        fun findCategoriesWithParentId(categories: List<Category>, parentId: String): List<Category> {
            val finalCategories = ArrayList<Category>()
            for (categ in categories) {
                if (categ.idParent == parentId)
                    finalCategories.add(categ)
            }
            return finalCategories
        }

        @JvmStatic
        fun findCategoriesWithParentIdAndRemove(categories: MutableList<Category>, parentId: String): List<Category> {
            val finalCategories = ArrayList<Category>()
            var j = 0
            while (j < categories.size) {
                val category = categories[j]
                if (category.idParent == parentId) {
                    finalCategories.add(category)
                    categories.removeAt(j)
                    j--
                }
                j++
            }
            return finalCategories
        }

        @JvmStatic
        fun findRootCategoryInList(categories: List<Category>): String {
            return categories.firstOrNull {
                it.isRoot != null && (it.isRoot ?: false)
            }?.id ?: ""
        }

        @JvmStatic
        fun findVisibleCategoryInList(categories: List<Category>): List<Category> {
            return categories.filter { it.isRoot == true || it.isVisible == true }
        }

        @JvmStatic
        fun findCategoryById(categories: List<Category>, id: String): Int {
            var index = 0
            for (categ in categories) {
                if (categ.id == id)
                    return index
                index++
            }
            return -1
        }

        @JvmStatic
        fun fromJson(json: String): Category {
            val gson = Gson()
            return gson.fromJson(json, Category::class.java)
        }
    }
}
